selectionSort:
	pushq %rbp
	movq %rsp, %rbp
	movq %rdi, - 24(%rbp)        ; arr
	movl %esi, - 28(%rbp)        ; n
	movl $0, - 4(%rbp)           ; i = 0
	jmp .L1
.L1:
	movl - 4(%rbp), %eax
	cmpl - 28(%rbp), %eax        ; i cmp n - 1
	jge .L6
	movl - 4(%rbp), %eax         ; min_idx = i
	movl %eax, - 8(%rbp)
	movl - 4(%rbp), %eax
	addl $1, %eax                ; j = i + 1
	movl %eax, - 12(%rbp)
	movl - 4(%rbp), %eax
	cltq
	leaq 0(, %rax, 4), %rdx      ; t1 = i * sizeof(int)
	movq - 24(%rbp), %rax
	addq %rdx, %rax              ; t2 = arr + t1
	movl (%rax), %eax            ; t6 = * t2
	movl %eax, - 16(%rbp)
.L2:
	movl - 12(%rbp), %eax
	cmpl - 28(%rbp), %eax        ; j cmp n
	jge .L5
	movl - 12(%rbp), %eax
	cltq
	leaq 0(, %rax, 4), %rdx      ; t3 = j * sizeof(int)
	movq - 24(%rbp), %rax
	addq %rdx, %rax              ; t4 = arr + t3
	movl (%rax), %eax            ; t5 = * t4
	cmpl %eax, - 16(%rbp)        ; t5 cmp t6
	jle .L4
	movl - 12(%rbp), %eax        ; min_idx = j
	movl %eax, - 8(%rbp)
	movl (%rax), %eax            ; t6 = t5
	movl %eax, - 16(%rbp)
.L4:
	addl $1, - 12(%rbp)          ; j = j + 1
	jmp .L2
.L5:
	movl - 8(%rbp), %eax
	cltq
	leaq 0(, %rax, 4), %rdx      ; t7 = min_idx * sizeof(int)
	movq - 24(%rbp), %rax
	addq %rdx, %rax              ; t8 = arr + t7
	movl (%rax), %eax            ; temp = * t8
	movl %eax, - 20(%rbp)
	movl - 4(%rbp), %eax
	cltq
	leaq 0(, %rax, 4), %rdx      ; t1 = i * sizeof(int)
	movq - 24(%rbp), %rax
	addq %rdx, %rax              ; t2 = arr + t1
	movl - 16(%rbp), %edx
	movl %edx, (%rax)            ; * t2 = * t8
	movl - 8(%rbp), %eax
	cltq
	leaq 0(, %rax, 4), %rdx      ; t7 = min_idx * sizeof(int)
	movq - 24(%rbp), %rax
	addq %rdx, %rax              ; t8 = arr + t7
	movl - 20(%rbp), %edx
	movl %edx, (%rax)            ; * t8 = temp
	addl $1, - 4(%rbp)           ; i = i + 1
	jmp .L1
.L6:
	nop
	popq %rbp
	ret
	
main:
	pushq %rbp
	movq %rsp, %rbp
	subq $32, %rsp
	movl $64, - 32(%rbp)
	movl $25, - 28(%rbp)
	movl $12, - 24(%rbp)
	movl $22, - 20(%rbp)
	movl $4, - 4(%rbp)           ; n = 4
	leaq - 32(%rbp), %rax        ; arr = &64
	movl - 4(%rbp), %edx
	movl %edx, %esi              ; push n
	movq %rax, %rdi              ; push arr
	call selectionSort
	movl $0, %eax
	leave
	ret
